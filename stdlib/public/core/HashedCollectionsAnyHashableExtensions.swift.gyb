//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2016 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

// FIXME(ABI)(compiler limitation): This protocol exists to identify
// `AnyHashable` in conditional extensions.  Replace this protocol
// with conditional extensions on `Set` and `Dictionary` "where Key ==
// AnyHashable".
public protocol _AnyHashableProtocol {
  var base: Any { get }
}

extension AnyHashable : _AnyHashableProtocol {}

//===----------------------------------------------------------------------===//
// Convenience APIs for Set<AnyHashable>
//===----------------------------------------------------------------------===//

// FIXME(ABI)(compiler limitation): replace with `where Element == AnyHashable`.
extension Set where Element : _AnyHashableProtocol {
  public func contains<ConcreteElement : Hashable>(
    _ member: ConcreteElement
  ) -> Bool {
    // FIXME(id-as-any): tests.
    return contains(AnyHashable(member))
  }

  public func index<ConcreteElement : Hashable>(
    of member: ConcreteElement
  ) -> SetIndex<Element>? {
    // FIXME(id-as-any): tests.
    return index(of: AnyHashable(member))
  }

  public mutating func insert<ConcreteElement : Hashable>(
    _ newMember: ConcreteElement
  ) -> (inserted: Bool, memberAfterInsert: ConcreteElement) {
    // FIXME(id-as-any): tests.
    let (inserted, memberAfterInsert) = insert(AnyHashable(newMember))
    return (
      inserted: inserted,
      memberAfterInsert: memberAfterInsert.base as! ConcreteElement)
  }

  @discardableResult
  public mutating func update<ConcreteElement : Hashable>(
    with newMember: ConcreteElement
  ) -> ConcreteElement? {
    // FIXME(id-as-any): tests.
    return update(with: AnyHashable(newMember))
      .map { $0.base as! ConcreteElement }
    // FIXME(id-as-any): test for the `as!` cast failure.
  }

  @discardableResult
  public mutating func remove<ConcreteElement : Hashable>(
    _ member: ConcreteElement
  ) -> ConcreteElement? {
    // FIXME(id-as-any): tests.
    return remove(AnyHashable(member))
      .map { $0.base as! ConcreteElement }
    // FIXME(id-as-any): test for the `as!` cast failure.
  }
}

//===----------------------------------------------------------------------===//
// Convenience APIs for Dictionary<AnyHashable, *>
//===----------------------------------------------------------------------===//

// FIXME(ABI)(compiler limitation): replace with `where Element == AnyHashable`.
extension Dictionary where Key : _AnyHashableProtocol {
  public func index<ConcreteKey : Hashable>(forKey key: ConcreteKey)
    -> DictionaryIndex<Key, Value>?
  {
    // FIXME(id-as-any): tests.
    return index(forKey: AnyHashable(key))
  }

  public subscript(_ key: _Hashable) -> Value? {
    // FIXME(ABI)(compiler limitation): replace this API with a
    // generic subscript.
    get {
      // FIXME(id-as-any): tests.
      return self[key._toAnyHashable()]
    }
    set {
      // FIXME(id-as-any): tests.
      self[key._toAnyHashable()] = newValue
    }
  }

  @discardableResult
  public mutating func updateValue<ConcreteKey : Hashable>(
    _ value: Value, forKey key: ConcreteKey
  ) -> Value? {
    // FIXME(id-as-any): tests.
    return updateValue(value, forKey: AnyHashable(key))
  }

  @discardableResult
  public mutating func removeValue<ConcreteKey : Hashable>(
    forKey key: ConcreteKey
  ) -> Value? {
    // FIXME(id-as-any): tests.
    return removeValue(forKey: AnyHashable(key))
  }
}

